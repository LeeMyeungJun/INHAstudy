

숫자변환
hex 16진수
oct 8진수
dec 10진수 

cout<<hex<<15 << endl;
cout<<oct <<15 << endl;
cout<<dec<<15 << endl;

cout.put(ch) // 문자상수ㅠ를 출력 하지만 잘사용하지않는다 . 

비밀번호입력하시오:___________  << 96p 
cout << "비밀번호를 입력하십시오:_____\b\b\b\b\b"; //5자리면 \b가 6개
	long code;
	cin >> code;



부동 소수점 정수와 정수사이의 값을 얻을수있으나 속도가 느리고 정밀도를 잃을수있다 . 0.1 50번 더한다고 5되는거아닌것처럼 

데이터형변환의 문제점 117p 하단

cin.getline(name,size) , cin 차이점 >> getline은 공백이있어도 한줄을 읽어오는데 cin은 공백있는곳까지 읽어옴
getline 
get(name,size)

149p cin.clear 봐야함 
160p 다시봐야함
195p 다시시작위치로 가는이유
220p vector 다시공부
406p 다시공부 
412p const 포인터 
415p 문자열 관련 한번더공부
426p 과 430 비교

getline 과 get의 차이 > get의 업그레이드버전이 getline 
다시 알아보기

string 다좋아 .  배열= 배열 X 스트링= 스트링 O

Stirng > str1.size() 길이를 구한다. char[] > strlen(str1) 

new 설명 188 malloc 과같다
delete            free

구조체포인터 212p (*ps).name = ps->name 같다 

213p 가지고와서 메모리 해제한다 .

자동공간 정적공간 동적공간
스택	힙,스택X	힙
auto 함수 220p
268p 문자열 검사

int n1; 
=
`v1; 같아  초기화하는법은  vector<int> v1(n1)  220p
v1.push_back() 추가하기하나씪 
v1.pop_back() 하나씩뺴기 
스택구조임 


array<int,4> arr 배열처럼 사용해라 클래스임 
string 배열 

화살표와 점 차이점  -> , .

clock_t  , sleep 
슬립은 제어권이 넘어간다 . 자원을 상대에게 준다 .
clock 는 while문이 넘어갈떄까지 모든자원을 다쓴다
복합적으로 사용하면 갠찬음 

while (clock)
{
sleep(0)이나 sleep(1)//제어권주기용이니까 0이나 1넣는거
}

for(int i = 0 ; i < 5; i++)
{
5번
}

for(double x:pr) //스트링도가능 
{
더블 pr 배열크기만큼 돌림 pr[5] 면 5번 0 1 2 3 4 
}

int iarr[] ={1,2,3,4,5,6}

for(int x: iarr)같음 

for(int x: {1,99,3,4,5,6 }) 
{
1,99,3,4,5,6,
}


const int STUDENTS = 5;
int grade[STUDENTS] = { 10,20,30,40,50 };

for (int *p = grade, *pend = grade + STUDENTS; p != pend; p++)
{
	cout << *p << "  ";
}


string, char 다된다 . 해봐라 

292p 컨트롤 C눌러서 종료할시 해당하는 코드

string.find()  =  char[].strstr  <string 과 char [] 배열  
find가 그string까지의 길이를 숫자로나타내줌.
string의 길이는 string변수.length()  	문자까지의 길이는 int 형변수=string변수.find("문자"); int형변수에 숫자가담김

if (!strcmp("asd","asd"))
strcmp 길이값이같다면 0으로 리턴하기떄문에 부정을붙여야 보기좋다

!is_int() << 인트형인지 아닌지 판단하는거같음 324p

문자관련 함수 330p (영문자인지 숫자인지 스페이스바눌럿는지 구두점인지 판단하는거 예제잇음.)

int n; cin>>n 햇는데 문자열 ,단어 입력하면 어떤일이 생길지 343p
int i =0;
while (cin >>fish[i]){  ---  }  문자나 단어를 느면 while 문을 빠져나옴. ㄷㄷ;'


파일입출력 353p <<입력   358 <<출력
File* fp == > ofstream fp; 같음 
fp.open("test.txt");
good() , fail()

cout.precision(2); << 이게뭔지
fixed << 뭔지
EXIT_FAILURE <<exit(EXIT_FAILURE); 1임

cin 은 공백까지 받는데 
getline(cin,string 변수) 공백까지 다포함해서 받는다.

bsearch()함수  

string list[size] == char list[size][128]
string자체가 배열이기떄문이야 .

array 객체 434p

array <자료형,크기> 변수명; ={내용} // 사이즈를 알때만 사용하자. 
벡터를 더많이씀
재귀호출

함수 포인터

int add(int,int);
int (*pFuc)(int,int) =add;
pFuc(2,5); < add(2,5) 와같음 

454p typedef 단순화 

#pragma once <<공부	
Capacity함수

inline 함수 470 : 호출이 잦고 함수 코드가 5줄정도? 되는거여야한다 크면 의미가없다 .
참조변수 < 다시공부 473 함수호출할떄 인자로 , 구조체나 클래스 큰것들 사용하는데 좋다 . 486 p설명  
const 485 p 설명읽어봐  이점 3가지 
const 함수 , const 매개변수 

494위설명 다시읽어보기 

참조 매개변수를 언제사용하는지 504 p (배열이면 포인터가 유일하므로 포인터를 사용한다 . const를 지시하는 포인터 )

506p 디폴트매개변수 


. -> 는 같은데 포인터로 받아오면 주소면 -> 값이면 . 

함수오버로딩 509p 자주사용하는것인지 
ex)void add(int , int)
    void add(float,float)

템플릿 인트형으로 받을떄도잇고 플룻형으로 받을떄도잇고 매개변수의 값의 갯수가 같을때 형만 다를때 사용
template<class Any> void Swap(Any &a,Any &b)
template<typename Any> void Swap(Any &a,Any &b) <<이걸로사용하자 
{

}
template<typename any,typename any2> void Swap(Any &a,Any &b) <<두개가 넘어오는경우 한번들어나봅시다 .
템플릿에 오버로딩이라 .. good

템플릿 사용할떄 int double float 만 생각하지말고 
	       배열, 구조체 도 생각을 해야한다.

템플릿 특수화 다시공부하기 528

541p 스킵하기 안좋은거임

auto함수 구글에 쳐보기 
	

309p따라서 쳐보기
514p따라서 쳐보기

ifstream
파일입출력 eof() //파일끝까지 읽엇는지 확인하는방법 
getline(readFile, str); 한줄 씩 읽어오기

함수 오버로딩 진짜부족함 , 템플릿도 부족함 

레지스터 변수메모리공간도 적고 ,아주 자주사용되는 변수에만 써야한다.

정적변수 속도는 느리다. 
static 이 그내부에서만 사용할수있다 .

extern 전역변수를 다른 파일에서도 사용하게끔 579p 
지역변수 전역변수 582p 확실히 나오니 다시보고가기

스태틱붙이면 extern이 안되는거임 ? 안됨
588p 아래부분 static 다시보기 초기화 한번밖에안해줘서 이런식으로 한거임

extern const states

static 함수  >>함수안에  변수들도 static이 되버리는것인지 .

IFDEF


new가 실패하는경우 597p 15장에있다고도함 . 예외처리 배우자.

599p new에 크기를 주고싶을때 이런식으로한다 . char를 이용 int도되긴함 안깔끔해서안씀

605p namespace 이름정의 

613p namespace 중첩 가능하긴한데 안쓰는게 좋다.

20200620 수학관련문제 안재욱씨꺼 보면서 array 공부하기

637 클래스 선언 

구조체안에는 public: 이 있는데 안보이는거야 

class에는 public 을쓰고 써야해  
private :  직접적으로 접근하지는 못함 
public : 은 우리가 직접저긍로 

class Student
{
public:
	char name[20];
	int number;

private:
	void setName(char* s)
	{
		strcpy(name, s);
	}
};
이런식 


다른 cpp에다가 함수써도됨 
645p

동적 new 클래스 해제법 662

676 this 포인터

클래스 배열 초기화 686p

디자인 패턴 뭔지 (싱글턴)

694p 추상화 클래스  한번 다시읽어보기 

알고리즘 공부

연산자 오버로딩 714p (시간 사칙연산) , 출력연산 800p되잇음 
오버로딩안되는 연산자 722 p

프랜드함수 프라이빗 껄 사용하기위함 거의안쓰긴함 727

스코프를 이용한 생성자 소멸자 관리

this 사용법

c++ 싱글톤 패턴

len = std::strlen(s);
	str = new char[len + 1];
	std::strcpy(str, s);
	num_strings++;
한글자씩 복사

객체는 스택구조다 소멸자가 스택처럼뒤에서 선언한거먼저 해제댐

800p 선언한 객체를 함수에 보낼떄 조심해야할점. 참조로 보내야한다 . 값으로 전달하면 소멸자가 호출됨.
문제점 802p에서부터 써잇음 읽어보도록.
오버로딩해서 막아줘야한다 이런문제점을 그런게 824p되있다
c_str()

* &연산자 함수에붙는거 , 변수에붙는거 다 공부하기

상속 부모가있으면
(생성)부모 > (생성)자식 > (소멸자)자식> (소멸자) 부모

가상함수는 동적바인딩

컨테이너들 

	virtual void Name() //virtual 이란 허락한다는의미 부모가 해야 자식이 자신의것을 사용할수있다.
	{
		cout << "Name:Fruit" << endl;
	}

protected 프라이빗처럼 사용하고 자식에게 private으로 넘겨줌 사용하라고

public 밑을 인터페이스라고 하는것이다 .
901페이지 다시 

for(vector<int>::iterator iter = v.begin(); iter != v.end(); iter++)
	cout << *iter << ' ';

966p 한번보기 > 파생클래스 new 

딥카피

객체를 리턴
객체에대한 참조 리턴974p

가상메서드 : 꼭재정의가 필요한것들 가상함수 하나라도 포함되면 추상클래스다( 순수 가상함수 virtual 함수 = 0)

프렌드함수 연습 연산자오버로딩 말고는 안쓰는게 좋을거임.

기초클래스 메서드사용 982p

생성자를 가상으로 선언 X 

순수가상함수 : 윤호선의답변 : 그니까 구지안써도된다 = 0 명시적으로 이부모함수는 쓰지않겠다고 명시하는것. 

순수가상함수를 하나라도 가지고있는것은 추상클래스라고 한다. 
추상클래스로는 객채를 생성할수없다 . 
추상클래스 용도는 추상적인 개념을 나타내거나 클래스와 클래스사이의 인터페이스를 나타내는 용도로 사용한다 . 
멤버 함수의 원형만을 부모에게 해준다 .
자식에서 순수가상함수를 구현해주어야한다 . 

= 0이라는것은 써야해 안쓰면 가상함수야 

가상함수는 함수내부구현까지 가능하지만 
순수가상함수가 써있는 클래스는 함수 내부구현까지는 불가능하다 . 하지만 사용할수있다.

추상클래스가지고는 객체를 생성할수없다 .

추상클래스는 디자인하는 용도 

순수가상함수란 클래스를 디자인하는 용도 라고말할수있다.

explicit  998페이지

다중상속 공부해보기 1047

클래스 템플릿 : 함수템플릿과 같은데 클래스로 간거와 같다 . 1053p 
주의사항: 클래스 만들때 

템플릿 1075

1113p 프랜드 클래스 예제 좋은거임 > 퍼블릭은 접근안하고 프라이빗만 접근할때 사용하는것같음 . 
퍼블릭만 접근할거면 상속관계가 더좋은거같음  XX

프랜드 > 리모컨 TV 뭔가 제어를하고싶을떄  >> 프랜드클래스 , 프랜드 함수 클래스전체를 친구로만들건지 클래스안에 함수만 프랜드로할건지
상속 > 동물 > 강아지 요런느낌

abort() 함수 비정상적인 프로그램종료 같은 메시지를 보내고 프로그램을 종료시키도록 구현 경고창 느낌 
1136p

쓰루에 만나게되면 그이하문장 무시함


1185페이지 이럴경우 딜리트 어떻게함? 널로 가면 할필요없는거 아닌가 

typeid 란> 
if(typeid(클래스이름) == typeid(클래스 객체이름))

typeid(*this).name() 이게 클래스 이름을 알기위해서 하는것.

dynamic_cast 형변환할때 앞에붙이면 변환실패시 0 성공시 1  1185p

4개의 데이터형 변환 연산자 1196p

1207p string 클래스 직접해봐야한다 . 이쪽은 
1208p string 생성자 
1216p 파일읽어오는 예제좋음

1227p 스마트포인터 매우중요 1230p예제잘나옴
auto_ptr, unique_ptr ,shared_ptr  ///////////////////////////////꼭다시

STL 1241p 
이터레이터 

1251p STL함수들
random_shuffle() 사용할떄 시드값 설정해줘야함
for_each()문
remove 안보이게 출력하는개념  1318p
erase()는 지우는개념

STL들이 뭐하는용도인지 뭔지는 알아두자. 나중에 찾되 기능은알아야 찾을거아닌가
맵, 멀티맵 공부 1299

백터 리스트 맵

알고리즘 공부할거면 백터랑 리스트만쓰고 다른것들 사용 ㄴ 
하지만 어느정도 알고있다하면 STL을 적응하는 

map 1300 잘나와있음
펑크터 1304p

flush

cout.fill('*'); 좋은거같음  1372  cout.width(7) 같이씀

cout.precision(2); 소수점 2자리까지 나타냄 1374

출력형식 지정상수들 1377p
ios_base :: 종류 > bool값을 true , false 출력, 접두어에 0,0x 를사용 , 뒤에 소수점을 표시 ,
	     16진 출력 E표기에 대문자를 사용 양수 앞에 +부호 사용 

failbit 으로인해 0 또는 1판단 //1394 ,1397
if(cin>>a)  잘못쓰면 못들어간다 . 
{
}

.c_str()

파일입출력
streampos end;
file.seekg(0.file.end)

함수에서 파라미터로 함수를받아서 사용하는 용어 : 콜백 함수