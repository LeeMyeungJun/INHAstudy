EPSILON = 0.001f;
fabs(lhs- rhs) < EPILON ? true; false;


벡터 크기와 방향
단위벡터 방향나타냄

(1,2,3) 벡터의 크기를 구하는건   
루트 1^2 + 2^2 + 3^2

벡터의 정규화 단위벡터가되게 만드는것 

(1,2,3) 단위벡터는 벡터의 크기만큼 나눠주면된다 .

스칼라곱 다시공부하기 -> 걍곱임 

내적 구하기 
1. 각각 선분들끼리 곱한다음에 더해주면됨 . 
2. 각각 벡터크기 구하고 곱해줌 또 그cos각 만큼 곱해줌

법선벡터 : 면에 수직인 벡터 
m_vEye 
내적해서 0   이면 직각 
내적 > 0     90보다 작다
내적 < 0     90보다 크다 


행렬
상등, 스칼라 곱, 더하기 

항등행렬
역행렬 = Confactor(행렬식 )
행렬의 전치 Transpose 전치행렬
minor 행렬 
Determinant 
Confactor 을 전치행렬해주면 Adjoint가 나온다 . 
역행렬 = (1/Determinant) * Adjoint 

이동 회전 다 행렬로 표현할거다 . 

회전할때 용어
롤 z 
요 y
피치 x

이동(역)행렬 55p
회전행렬 57p x y z
크기변형행렬 58p

SRT = world  
스케일 =1 // 2나 3이되면 확대가되는거고 
로테이션 = 1 //1 회전함수
트랜스레이트
 W 
뷰 
프로젝션 투영단계
뷰포트 
S-R-T-W-V-P-(VP)

//시야벡터와 각각의 폴리곤에대한 법선벡터가 있단말이야
		//어떤관계를 찾으면될까 
내적을하면되잖아
dot하면 어떻게된다고 

언제까지는 +값 
어디서부터 어디까지는 -값 
그걸이용해서 
아 이건 내눈에 안보이는거구나 .그거를 만들어봐

백페이스 컬링

//다이렉트X 설정
View - >otherManager - > Property Manager - > Microsoft.cpp.win32.user 더블클릭 
UserMacros 
$(VC_IncludePath);$(WindowsSDK_IncludePath);$(DH);
DL도해주고 
프로젝트 프로포티 ->Configuration Properties - > Configuration - > Configuration Manager클릭 -> 64bit 제거 86만사용할거
sln 프로포티 -> C++ ->General - > SDL checks = No,  Multi-process = YES ->Conde Generation->
Minimal Rebuild= no 끝



//장치관련을 cMainGame이아닌 장치관리 클래스를만들자 . CDeviceManager

<<<<<<< HEAD
노멀은 반사같은걸 처리하는애임 
픽셀과 노멀과 텍스쳐
=======

float rotY = playerBody[0]->m_fRotY;
	D3DXMATRIXA16 rotYMat;
	D3DXMatrixRotationY(&rotYMat, rotY);
	
	for each(auto p in playerBody)
	{
		D3DXVECTOR3 newPos = p->GetPosition();
		D3DXVec3TransformNormal(&newPos, &newPos, &rotYMat);
		p->setPosition(newPos);
	}

공전 위에 


m_Tmat =playerBody[0]->GetTmat();

	for each(auto p in playerBody)
	{

		p->setTmat(m_Tmat);
		p->Update();
	}

자전 위에

>>>>>>> 7de175dd1b18d603c947e6fd2b5ced6dc0b34ce0

PNT N 법선벡터잖아 
법선벡터에따라 그림자가 생기는거 디렉셔널 라이트

법선벡터에따라 그림자가 생기는거 디렉셔널 라이트
1. Grid pn.. 바꿔서 라이트 적용되는거 확인할수있도록
2. Direction Light .. 해뜨고 지는것처럼 만들것 
3. Spot Light .. 키 입력에따라서 방향조정
4. Point Light .. 범위를 조정 할수 있도록 
5. 각라이트의 위치를 박스로 표시해줄것 .

